plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'io.github.gerv-g'
version '1.0.0-SNAPSHOT'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
}

test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

publishing {
    repositories {
        maven {
            name = 'JRail'
            url = "https://maven.pkg.github.com/Gerv-G/jrail"

            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(tasks['sourcesJar'])
            artifact(tasks['javadocJar'])

            pom {
                name = 'jrail'
                description = 'A library for implementing railway-oriented programming in Java'
                url = 'https://github.com/Gerv-G/jrail'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/Gerv-G/jrail/master/LICENSE.md'
                    }
                }

                developers {
                    developer {
                        id = 'gerv-g'
                        name = 'Gervin Guevarra'
                    }
                }

                scm {
                    connection = 'scm:git:git:https://github.com/Gerv-G/jrail.git'
                    developerConnection = 'scm:git:ssh:git@github.com:Gerv-G/jrail.git'
                    url = 'https://github.com/Gerv-G/jrail'
                }
            }
        }
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

signing {
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}